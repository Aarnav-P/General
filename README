This file contains a description of each file in this repo, and the skills learned from. Only files that can demonstrate useful/worthwhile progress are included.

'Chi2_fit_to_data.py' - Python script that computes the Chi-squared value of a set of bivariate data
      > Skills learned:
        - Intro to arrays, replacement fields, measures of statistical relevance
        
'Curve_fit.py' - Using Least-Squares-Fit-Regression(LSFR) to define a function
      > Skills learned:
        - Defining a function, better proficiency with matplotlib, how to learn a set of functions quickly.

'Boltzmann.py' - Used for a lab experiment to determine the value of Boltzmann's constant and absolute zero. 
      > Skills learned:
        - Synthesising previous skills, introduction to pandas module and the dataframe (df) storage type

'pytorch 1 - tensors.py' - The start of my endeavour to learn and be able to fluidly use Machine Learning techniques. 
   # "Why pytorch and not tensorflow?
   # pytorch is less automated, I am aiming to get a fuller understanding of how using machine learning actually
     works in practice, so that I can independently use it for any project I decide to apply it to."
      > Skills learned
        - Understanding what a tensor object is in pytorch, broadcasting rules for tensors, advantages of tensors over arrays, some basic ML concepts 
        (weighting, averaging over data sets by using  multi-dim tensors)

'vector field visualising.py' - Playing with the matplotlib library to better represent data.
      > Skills learned:
        - Using 'quiver' and 'streamplot' subfunctions, data presentation customisation.
      > To-do: Understand dictionaries and further explore Matplotlib

'pytorch 2 - basic networks.py' - Conceptualising what a loss function represents through visualising partial derivatives in lower-dimensional space 
                                  and extrapolating the concept. Understanding how a NN (Neural Network) fundamentally works.
      > Skills learned:
        - Creating basic NN's, Simple loss and optimisation function, Purpose and limitations of NN's
      > To-do:
        - Understanding classes, subclasses etc. and OOP better.  

'classes.py' - Starting back on the ML path. Needed to address the issue of understanding classes that was outlined in 'pytorch 2...'
